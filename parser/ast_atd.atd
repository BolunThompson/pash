type char = int

type linno = int

type t = [
    Command of (linno * assign list * args * redirection list) (* assign, args, redir *)
  | Pipe of (bool * t list) (* background?, commands *)
  | Redir of (linno * t * redirection list)
  | Background of (linno * t * redirection list) 
  | Subshell of (linno * t * redirection list)
  | And of (t * t)
  | Or of (t * t)
  | Not of t
  | Semi of (t * t)
  | If of (t * t * t) (* cond, then, else *)
  | While of (t * t) (* test, body *) (* until encoded as a While . Not *)
  | For of (linno * arg * t * string) (* args, body, var *)
  | Case of (linno * arg * case list)
  | Defun of (linno * string * t) (* name, body *)
]

type assign = (string * arg)

type redirection = [
     File of (redir_type * int * arg)
   | Dup of (dup_type * int * arg)
   | Heredoc of (heredoc_type * int * arg)
]

type redir_type = [
     To
   | Clobber
   | From
   | FromTo
   | Append
]

type dup_type = [
     ToFD
   | FromFD
]

type heredoc_type = [
     Here
   | XHere (* for when in a quote... not sure when this comes up *)
]

type args = arg list

type arg = arg_char list

type arg_char = [
     C of char
   | E of char (* escape... necessary for expansion *)
   | T of string option (* tilde *)
   | A of arg (* arith *)
   | V of (var_type * bool (* VSNUL? *) * string * arg)
   | Q of arg (* quoted *)
   | B of t (* backquote *)
]

type var_type = [
     Normal
   | Minus
   | Plus
   | Question
   | Assign
   | TrimR
   | TrimRMax
   | TrimL
   | TrimLMax
   | Length
]

type case = {
  cpattern : arg list;
  cbody : t
}